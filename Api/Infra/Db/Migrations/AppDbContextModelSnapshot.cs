// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using minimal_api.Infra.Db;

#nullable disable

namespace minimal_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("minimal_api.Api.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParkingSpotId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Contract", (string)null);

                    b.HasDiscriminator().HasValue("Contract");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("minimal_api.Domain.Entities.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Administrators", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "adm@teste.com",
                            Password = "123",
                            Profile = "Administrator"
                        });
                });

            modelBuilder.Entity("minimal_api.Domain.Entities.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentVehicleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SpotNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentVehicleId");

                    b.ToTable("ParkingSpots", (string)null);
                });

            modelBuilder.Entity("minimal_api.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("minimal_api.Api.Domain.Entities.MonthlyContract", b =>
                {
                    b.HasBaseType("minimal_api.Api.Domain.Entities.Contract");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasIndex("ParkingSpotId");

                    b.HasDiscriminator().HasValue("MonthlyContract");
                });

            modelBuilder.Entity("minimal_api.Api.Domain.Entities.RotativeContract", b =>
                {
                    b.HasBaseType("minimal_api.Api.Domain.Entities.Contract");

                    b.Property<int?>("AdditionalHours")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int");

                    b.HasIndex("ParkingSpotId");

                    b.HasDiscriminator().HasValue("RotativeContract");
                });

            modelBuilder.Entity("minimal_api.Api.Domain.Entities.Contract", b =>
                {
                    b.HasOne("minimal_api.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Contracts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("minimal_api.Domain.Entities.ParkingSpot", b =>
                {
                    b.HasOne("minimal_api.Domain.Entities.Vehicle", "CurrentVehicle")
                        .WithMany()
                        .HasForeignKey("CurrentVehicleId");

                    b.Navigation("CurrentVehicle");
                });

            modelBuilder.Entity("minimal_api.Api.Domain.Entities.MonthlyContract", b =>
                {
                    b.HasOne("minimal_api.Domain.Entities.ParkingSpot", "Spot")
                        .WithMany()
                        .HasForeignKey("ParkingSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("minimal_api.Api.Domain.Entities.RotativeContract", b =>
                {
                    b.HasOne("minimal_api.Domain.Entities.ParkingSpot", "Spot")
                        .WithMany()
                        .HasForeignKey("ParkingSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("minimal_api.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
